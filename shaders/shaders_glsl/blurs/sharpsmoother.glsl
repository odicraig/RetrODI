// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0022;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    float _x;
    float _y;
    vec2 _dg1;
    vec2 _dg2;
    vec2 _dx;
    vec2 _dy;
    vec2 _TMP10;
    vec2 _TMP11;
    vec2 _TMP12;
    vec2 _TMP13;
    vec2 _TMP14;
    vec2 _TMP15;
    vec2 _TMP16;
    vec2 _TMP17;
    out_vertex _TMP18;
    _x = 1.00000000E+00/TextureSize.x;
    _y = 1.00000000E+00/TextureSize.y;
    _dg1 = vec2(_x, _y);
    _dg2 = vec2(-_x, _y);
    _dx = vec2(_x, 0.00000000E+00);
    _dy = vec2(0.00000000E+00, _y);
    _r0022 = VertexCoord.x*MVPMatrix[0];
    _r0022 = _r0022 + VertexCoord.y*MVPMatrix[1];
    _r0022 = _r0022 + VertexCoord.z*MVPMatrix[2];
    _r0022 = _r0022 + VertexCoord.w*MVPMatrix[3];
    _TMP16 = TexCoord.xy - _dg1;
    _TMP17 = TexCoord.xy - _dy;
    _TMP18._t1 = vec4(_TMP16.x, _TMP16.y, _TMP17.x, _TMP17.y);
    _TMP14 = TexCoord.xy - _dg2;
    _TMP15 = TexCoord.xy + _dx;
    _TMP18._t2 = vec4(_TMP14.x, _TMP14.y, _TMP15.x, _TMP15.y);
    _TMP12 = TexCoord.xy + _dg1;
    _TMP13 = TexCoord.xy + _dy;
    _TMP18._t3 = vec4(_TMP12.x, _TMP12.y, _TMP13.x, _TMP13.y);
    _TMP10 = TexCoord.xy + _dg2;
    _TMP11 = TexCoord.xy - _dx;
    _TMP18._t4 = vec4(_TMP10.x, _TMP10.y, _TMP11.x, _TMP11.y);
    _ret_0._position1 = _r0022;
    _ret_0._texCoord = TexCoord.xy;
    _ret_0._t1 = _TMP18._t1;
    _ret_0._t2 = _TMP18._t2;
    _ret_0._t3 = _TMP18._t3;
    _ret_0._t4 = _TMP18._t4;
    gl_Position = _r0022;
    TEX0.xy = TexCoord.xy;
    TEX1 = _TMP18._t1;
    TEX2 = _TMP18._t2;
    TEX3 = _TMP18._t3;
    TEX4 = _TMP18._t4;
    return;
    TEX0.xy = _ret_0._texCoord;
    TEX1 = _ret_0._t1;
    TEX2 = _ret_0._t2;
    TEX3 = _ret_0._t3;
    TEX4 = _ret_0._t4;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec4 _t4;
COMPAT_VARYING     vec4 _t3;
COMPAT_VARYING     vec4 _t2;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     float _frame_rotation;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec2 _texCoord;
    vec4 _t1;
    vec4 _t2;
    vec4 _t3;
    vec4 _t4;
};
vec4 _ret_0;
float _TMP32;
float _TMP33;
vec3 _TMP31;
float _TMP30;
vec3 _TMP29;
float _TMP28;
vec3 _TMP27;
float _TMP26;
vec3 _TMP25;
float _TMP24;
vec3 _TMP23;
float _TMP22;
vec3 _TMP21;
float _TMP20;
vec3 _TMP19;
float _TMP18;
vec3 _TMP17;
float _TMP16;
float _TMP15;
float _TMP14;
float _TMP13;
float _TMP12;
float _TMP11;
float _TMP10;
float _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
vec3 _a0063;
vec3 _a0065;
vec3 _a0067;
vec3 _a0069;
vec3 _a0071;
vec3 _a0073;
vec3 _a0075;
vec3 _a0077;
vec3 _a0079;
float _TMP82;
float _x0083;
vec3 _a0089;
float _TMP92;
float _x0093;
vec3 _a0099;
float _TMP102;
float _x0103;
vec3 _a0109;
float _TMP112;
float _x0113;
vec3 _a0119;
float _TMP122;
float _x0123;
vec3 _a0129;
float _TMP132;
float _x0133;
vec3 _a0139;
float _TMP142;
float _x0143;
vec3 _a0149;
float _TMP152;
float _x0153;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
COMPAT_VARYING vec4 TEX3;
COMPAT_VARYING vec4 TEX4;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    float _l10;
    float _l01;
    float _l12;
    float _l21;
    float _l00;
    float _l22;
    float _l20;
    float _l02;
    vec3 _TMP43;
    _TMP0 = COMPAT_TEXTURE(Texture, TEX1.xy);
    _TMP1 = COMPAT_TEXTURE(Texture, TEX1.zw);
    _TMP2 = COMPAT_TEXTURE(Texture, TEX2.xy);
    _TMP3 = COMPAT_TEXTURE(Texture, TEX4.zw);
    _TMP4 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _TMP5 = COMPAT_TEXTURE(Texture, TEX2.zw);
    _TMP6 = COMPAT_TEXTURE(Texture, TEX4.xy);
    _TMP7 = COMPAT_TEXTURE(Texture, TEX3.zw);
    _TMP8 = COMPAT_TEXTURE(Texture, TEX3.xy);
    _a0063 = _TMP1.xyz + _TMP1.xyz + _TMP4.xyz;
    _TMP9 = dot(_a0063, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _l10 = 1.19999997E-01*_TMP9 + 2.50000000E-01;
    _a0065 = _TMP3.xyz + _TMP3.xyz + _TMP4.xyz;
    _TMP10 = dot(_a0065, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _l01 = 1.19999997E-01*_TMP10 + 2.50000000E-01;
    _a0067 = _TMP7.xyz + _TMP7.xyz + _TMP4.xyz;
    _TMP11 = dot(_a0067, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _l12 = 1.19999997E-01*_TMP11 + 2.50000000E-01;
    _a0069 = _TMP5.xyz + _TMP5.xyz + _TMP4.xyz;
    _TMP12 = dot(_a0069, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _l21 = 1.19999997E-01*_TMP12 + 2.50000000E-01;
    _a0071 = _TMP0.xyz + _TMP0.xyz + _TMP4.xyz;
    _TMP13 = dot(_a0071, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _l00 = 1.19999997E-01*_TMP13 + 2.50000000E-01;
    _a0073 = _TMP8.xyz + _TMP8.xyz + _TMP4.xyz;
    _TMP14 = dot(_a0073, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _l22 = 1.19999997E-01*_TMP14 + 2.50000000E-01;
    _a0075 = _TMP2.xyz + _TMP2.xyz + _TMP4.xyz;
    _TMP15 = dot(_a0075, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _l20 = 1.19999997E-01*_TMP15 + 2.50000000E-01;
    _a0077 = _TMP6.xyz + _TMP6.xyz + _TMP4.xyz;
    _TMP16 = dot(_a0077, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _l02 = 1.19999997E-01*_TMP16 + 2.50000000E-01;
    _a0079 = _TMP4.xyz - _TMP1.xyz;
    _TMP17 = abs(_a0079);
    _TMP18 = dot(_TMP17, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _x0083 = (-3.00000012E-01*_TMP18)/_l10 + 3.24999988E-01;
    _TMP33 = min(1.50000006E-01, _x0083);
    _TMP82 = max(-6.49999976E-02, _TMP33);
    _a0089 = _TMP4.xyz - _TMP5.xyz;
    _TMP19 = abs(_a0089);
    _TMP20 = dot(_TMP19, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _x0093 = (-3.00000012E-01*_TMP20)/_l21 + 3.24999988E-01;
    _TMP33 = min(1.50000006E-01, _x0093);
    _TMP92 = max(-6.49999976E-02, _TMP33);
    _a0099 = _TMP4.xyz - _TMP7.xyz;
    _TMP21 = abs(_a0099);
    _TMP22 = dot(_TMP21, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _x0103 = (-3.00000012E-01*_TMP22)/_l12 + 3.24999988E-01;
    _TMP33 = min(1.50000006E-01, _x0103);
    _TMP102 = max(-6.49999976E-02, _TMP33);
    _a0109 = _TMP4.xyz - _TMP3.xyz;
    _TMP23 = abs(_a0109);
    _TMP24 = dot(_TMP23, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _x0113 = (-3.00000012E-01*_TMP24)/_l01 + 3.24999988E-01;
    _TMP33 = min(1.50000006E-01, _x0113);
    _TMP112 = max(-6.49999976E-02, _TMP33);
    _a0119 = _TMP4.xyz - _TMP0.xyz;
    _TMP25 = abs(_a0119);
    _TMP26 = dot(_TMP25, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _x0123 = (-3.00000012E-01*_TMP26)/_l00 + 3.24999988E-01;
    _TMP33 = min(1.00000001E-01, _x0123);
    _TMP122 = max(-6.49999976E-02, _TMP33);
    _a0129 = _TMP4.xyz - _TMP8.xyz;
    _TMP27 = abs(_a0129);
    _TMP28 = dot(_TMP27, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _x0133 = (-3.00000012E-01*_TMP28)/_l22 + 3.24999988E-01;
    _TMP33 = min(1.00000001E-01, _x0133);
    _TMP132 = max(-6.49999976E-02, _TMP33);
    _a0139 = _TMP4.xyz - _TMP2.xyz;
    _TMP29 = abs(_a0139);
    _TMP30 = dot(_TMP29, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _x0143 = (-3.00000012E-01*_TMP30)/_l20 + 3.24999988E-01;
    _TMP33 = min(1.00000001E-01, _x0143);
    _TMP142 = max(-6.49999976E-02, _TMP33);
    _a0149 = _TMP4.xyz - _TMP6.xyz;
    _TMP31 = abs(_a0149);
    _TMP32 = dot(_TMP31, vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _x0153 = (-3.00000012E-01*_TMP32)/_l02 + 3.24999988E-01;
    _TMP33 = min(1.00000001E-01, _x0153);
    _TMP152 = max(-6.49999976E-02, _TMP33);
    _TMP43 = _TMP82*_TMP1.xyz + _TMP92*_TMP5.xyz + _TMP102*_TMP7.xyz + _TMP112*_TMP3.xyz + _TMP122*_TMP0.xyz + _TMP132*_TMP8.xyz + _TMP142*_TMP2.xyz + _TMP152*_TMP6.xyz + ((((((((1.00000000E+00 - _TMP82) - _TMP92) - _TMP102) - _TMP112) - _TMP122) - _TMP132) - _TMP142) - _TMP152)*_TMP4.xyz;
    _ret_0 = vec4(_TMP43.x, _TMP43.y, _TMP43.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
