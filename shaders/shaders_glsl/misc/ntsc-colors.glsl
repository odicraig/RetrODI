// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying
#define COMPAT_ATTRIBUTE attribute
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec4 _color1;
struct output_dummy {
    vec4 _color1;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
vec4 _oPosition1;
vec4 _r0005;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec4 _oColor;
    vec2 _otexCoord;
    _r0005 = VertexCoord.x*MVPMatrix[0];
    _r0005 = _r0005 + VertexCoord.y*MVPMatrix[1];
    _r0005 = _r0005 + VertexCoord.z*MVPMatrix[2];
    _r0005 = _r0005 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0005;
    _oColor = COLOR;
    _otexCoord = TexCoord.xy;
    gl_Position = _r0005;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec4 _color2;
struct output_dummy {
    vec4 _color2;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
float _TMP9;
float _TMP10;
float _TMP7;
float _TMP8;
float _TMP5;
float _TMP6;
vec3 _TMP11;
float _TMP4;
float _TMP3;
float _TMP2;
vec4 _TMP0;
uniform sampler2D Texture;
vec3 _v0022;
vec3 _r0032;
vec3 _r0044;
vec3 _TMP53;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    output_dummy _OUT;
    _TMP0 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _TMP2 = pow(_TMP0.x, 2.20000005E+00);
    _TMP3 = pow(_TMP0.y, 2.20000005E+00);
    _TMP4 = pow(_TMP0.z, 2.20000005E+00);
    _v0022 = vec3(_TMP2, _TMP3, _TMP4);
    _r0032.x = dot(vec3( 6.06890917E-01, 1.73501104E-01, 2.00348005E-01), _v0022);
    _r0032.y = dot(vec3( 2.98916399E-01, 5.86598992E-01, 1.14484496E-01), _v0022);
    _r0032.z = dot(vec3( 0.00000000E+00, 6.60957024E-02, 1.11622429E+00), _v0022);
    _r0044.x = dot(vec3( 3.24045420E+00, -1.53713846E+00, -4.98531401E-01), _r0032);
    _r0044.y = dot(vec3( -9.69265997E-01, 1.87601078E+00, 4.15560007E-02), _r0032);
    _r0044.z = dot(vec3( 5.56433983E-02, -2.04025894E-01, 1.05722523E+00), _r0032);
    _TMP11 = min(vec3( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _r0044);
    _TMP53 = max(vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP11);
    if (_TMP53.x <= 3.13066854E-03) { 
        _TMP5 = _TMP53.x*1.29200001E+01;
    } else {
        _TMP6 = pow(_TMP53.x, 4.16666657E-01);
        _TMP5 = 1.05499995E+00*_TMP6 - 5.49999997E-02;
    } 
    if (_TMP53.y <= 3.13066854E-03) { 
        _TMP7 = _TMP53.y*1.29200001E+01;
    } else {
        _TMP8 = pow(_TMP53.y, 4.16666657E-01);
        _TMP7 = 1.05499995E+00*_TMP8 - 5.49999997E-02;
    } 
    if (_TMP53.z <= 3.13066854E-03) { 
        _TMP9 = _TMP53.z*1.29200001E+01;
    } else {
        _TMP10 = pow(_TMP53.z, 4.16666657E-01);
        _TMP9 = 1.05499995E+00*_TMP10 - 5.49999997E-02;
    } 
    _OUT._color2 = vec4(_TMP5, _TMP7, _TMP9, 1.00000000E+00);
    FragColor = _OUT._color2;
    return;
} 
#endif
